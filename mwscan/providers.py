import requests
import re
import json
import requests_cache
requests_cache.install_cache()


def strip_last_url_path(url):
    parent, _, _ = url.rpartition('/')
    return parent


class RulesProvider:
    def fetch(self):
        # returns rules, whitelist
        pass


class NBS(RulesProvider):

    starturl = 'https://raw.githubusercontent.com/nbs-system/php-malware-finder/master/php-malware-finder/php.yar'

    def fetch(self):
        rawrules = self._fetch(self.starturl)
        rules, whitelist = self._parse_rules(rawrules)

    def _parse_rules(self, rawrules):
        whitelist = set()
        rules = list()


        # private rule Drupal : Blog
        # private rule IRC
        # rule CloudFlareBypass

        tokens = re.findall('\n(?:global )?(?:private )?rule .+?\n\{\n.+?\n\}', rawrules, flags=re.DOTALL)

        for token in tokens:
            hashes = re.findall('== "([a-f0-9]{40})"', token)

            if 'rule IsWhitelisted' in token:
                continue

            if hashes or 'hash.sha1' in token:
                whitelist.update(hashes)
            else:
                token = token.strip()
                token = re.sub(' and not IsWhitelisted', '', token)

                rules.append(token.strip())

        return '\n'.join(rules), whitelist

    def _fetch(self, url):
        print("Fetching", url)

        def include(match):
            relpath = match.group(1)
            # return match.group(1)
            newurl = strip_last_url_path(url) + '/' + relpath
            # print('{} points to {}'.format(url, newurl))
            return "/* included from {} */\n".format(newurl) + self._fetch(newurl)

        data = requests.get(url).text
        data = re.sub('include "([^"]+?)"\s+', include, data)
        data = re.sub('import "hash"\s*', '', data)
        return data

class Magemojo(RulesProvider):
    pass


class Byte(RulesProvider):
    pass


providers = {
    'nbs': NBS,
    'byte': Byte,
    'magemojo': Magemojo,
}
