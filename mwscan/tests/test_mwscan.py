import os
from unittest import TestCase
from mwscan.mwscan import find_targets, load_rules, find_last_run_timestamp, write_last_run_timestamp, \
    scan_files, path_to_timestamp_file


class TestWebMalwareScanner(TestCase):

    def setUp(self):
        self.fixture_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'fixtures')
        self.rules_path = os.path.join(self.fixture_path, 'rules.yar')
        self.target_path = os.path.join(self.fixture_path, 'files')
        self.state_file = path_to_timestamp_file(self.target_path)
        self.new_file = os.path.join(self.target_path, 'newer_malware')

        # might still exist from cancelled earlier test
        for i in self.new_file, self.state_file:
            try:
                os.unlink(i)
            except OSError:
                pass

        self.rules, self.whitelist = load_rules(self.rules_path)

    def test_normal_scan(self):
        files = find_targets(self.target_path)
        total, malware, whitelisted = scan_files(files, self.rules, self.whitelist)

        self.assertEqual(total, 6)
        self.assertEqual(malware, 2)
        self.assertEqual(whitelisted, 1)

    def test_incremental_scan(self):
        write_last_run_timestamp(self.target_path)

        ts = find_last_run_timestamp(self.target_path)

        # self.assertGreater not available in py2.6
        assert ts > 1483911182, 'invalid timestamp %s' % ts

        # place "newer malware"
        with open(self.new_file, 'w') as fh:
            fh.write('BAD\n')

        files = find_targets(self.target_path, newer_than=ts)
        total, malware, whitelisted = scan_files(files, self.rules, self.whitelist)

        self.assertEqual(total, 1)
        self.assertEqual(malware, 1)

    def test_filter_extensions(self):

        ext = ['php']

        files = find_targets(self.target_path, req_ext=ext)
        total, malware, whitelisted = scan_files(files, self.rules, self.whitelist)

        self.assertEqual(total, 2)
        self.assertEqual(malware, 1)
        self.assertEqual(whitelisted, 0)

    def test_external_rule_file(self):
        files = find_targets(self.target_path)

        self.rules, self.whitelist = load_rules(os.path.join(self.fixture_path, 'rules-vanilla.yar'))

        total, malware, whitelisted = scan_files(files, self.rules, self.whitelist)

        self.assertEqual(total, 6)
        self.assertEqual(malware, 2)
        self.assertEqual(whitelisted, 0)
