#!/usr/bin/env python

import re
import os
import hashlib
import json
from glob import glob

CURDIR = os.path.dirname(os.path.realpath(__file__))
BUILDDIR = os.path.join(CURDIR, '..', 'build')
RULESDIR = os.path.join(CURDIR, '..', 'rules')
SOURCES = ('backend.yar', 'frontend.yar')
RULENAME = 'all-confirmed'
WHITELISTDIR = os.path.join(CURDIR, '..', 'malware', 'whitelisted')

yara_match_pattern = '\$ = (?:/(.+)/|"(.+)")\s*\n'

def fixed_to_regex(f):

	try:
		# python2
		unescaped = f.decode('string_escape')
	except AttributeError:
		# python3
		unescaped = bytes(f, 'utf-8').decode('unicode_escape')

	# we should NOT escape single quotes (what re.escape does) for 
	# mysterious reasons, see http://stackoverflow.com/questions/41325348/escape-puzzle-why-does-grep-ignore-escaping-of-single-quote
	escaped = re.escape(unescaped).replace(r'\'', "'")
	return escaped


def parse_yara_file(fh):
	p = set()
	for line in fh:
		# print(line)
		m = re.search(yara_match_pattern, line)
		if m:
			if m.group(1): 
				# regex
				pattern = m.group(1)
			else:
				# fixed string, need to un-escape and then escape regex chars
				pattern = fixed_to_regex(m.group(2))
			p.add(pattern)
	return p


def find_file_hashes(root):
	allhashes = dict()
	for prefix, dirs, files in os.walk(root):
		for fn in files:
			fullpath = os.path.join(prefix, fn)

			# /malware/whitelisted/NeoPI/animal_shell_poc.php => NeoPI/animal_shell_poc.php
			relpath = fullpath[len(root)+1:]
			
			with open(fullpath, 'rb') as fh:
				hash = hashlib.sha1(fh.read()).hexdigest() 
				allhashes[hash] = relpath
	return allhashes


def write_grep_rules():

	patterns = set()

	for path in SOURCES:
		with open(os.path.join(RULESDIR, path)) as fh:
			patterns = patterns.union(parse_yara_file(fh))

	with open(os.path.join(BUILDDIR, RULENAME + '.txt'), 'w') as fh:
		for p in sorted(patterns):
			fh.write(p + '\n')

def write_yara_rules():
	with open(os.path.join(BUILDDIR, RULENAME + '.yar'), 'w') as fhout:
		fhout.write("/* AUTO GENERATED BY <{0}> DO NOT EDIT\n\nWHITELIST = {1}\n\n*/\n\n".format(
			__file__,
			json.dumps(find_file_hashes(WHITELISTDIR), indent=2, sort_keys=True)
		))
		for path in SOURCES:
			with open(os.path.join(RULESDIR, path)) as fhin:
				fhout.write(fhin.read())		


if __name__ == '__main__':
	
	write_grep_rules()
	write_yara_rules()

	print("Written build files to {}".format(BUILDDIR))
